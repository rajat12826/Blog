generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  
}
 
model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String?   // Added optional name field
  createdAt DateTime  @default(now())
  blogs     Blog[]
  accounts  Account[]
  sessions  Session[]
}

model Account {
  id                String  @id @default(uuid()) // Changed to match User id type
  userId            String  // Changed to String to match User id type
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) // Changed to match User id type
  sessionToken String   @unique
  userId       String   // Changed to String to match User id type
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  tags      String?
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String?  // Changed to String to match User id type
  author    User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
}